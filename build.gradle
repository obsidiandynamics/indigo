plugins {
  id "com.github.ben-manes.versions" version "0.22.0"
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
      username = findProperty('sonatype.username')
      password = findProperty('sonatype.password')
    }
  }
}

def versionFile(extension) {
  return new File("src/main/resources/" + project.name + extension)
}

def getVersion(extension) {
  def versionFile = versionFile extension
  if (! versionFile.exists()) return "0"
  def reader = new BufferedReader(new FileReader(versionFile))
  def version = reader.readLine().trim()
  reader.close()
  return version
}

def setVersion(extension, version) {
  def versionFile = versionFile extension
  def writer = new BufferedWriter(new FileWriter(versionFile))
  writer.write(String.valueOf(version))
  writer.close()
}

def packageVersion = getVersion ".version"

task getBuild() {
  doLast {
    println "At ${getVersion(".version")}_${getVersion(".build")}"
  }
}

task setBuild() {
  doLast {
    def timestamp = new java.text.SimpleDateFormat("yyMMddHHmm").format(new Date())
    setVersion(".build", timestamp)
  }
}

def baseJvmArgs = [
  "--add-opens=java.base/java.io=ALL-UNNAMED",
  "--add-opens=java.base/java.lang=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
  "--add-opens=java.base/java.nio=ALL-UNNAMED",
  "--add-opens=java.base/java.util=ALL-UNNAMED",
  "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
  "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
  "-XX:-MaxFDLimit",
  "-XX:+TieredCompilation",
  "-XX:+UseNUMA",
  "-XX:+UseCondCardMark",
  "-Djava.net.preferIPv4Stack=true"
]
project.ext.set("baseJvmArgs", baseJvmArgs)

allprojects {
  apply plugin: "java-library"
  apply plugin: "jacoco"
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  group = "com.obsidiandynamics.indigo"
  version = packageVersion

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  //TODO remove when Javadoc errors have been resolved
  javadoc.options.addStringOption('Xdoclint:none', '-quiet')

  repositories {
    mavenCentral()
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots"
    }
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  signing {
    sign publishing.publications
  }

  ext {
    awaitilityVersion = "3.1.6"
    commonsMathsVersion = "3.6.1"
    equalsverifierVersion = "3.10"
    fulcrumVersion = "0.38.0"
    gsonVersion = "2.8.5"
    gsonExtrasVersion = "0.2.1"
    junitVersion = "4.12"
    pojotesterVersion = "0.9.0"
    slf4jVersion = "1.7.25"
  }
  
  test {
    include "**/*Test.class"
    jvmArgs += baseJvmArgs

    testLogging {
      info.events = ["started", "failed", "skipped", "passed"]
    }
  }
}
  
jacoco {
  toolVersion = "0.8.8"
}

jacocoTestReport {
  dependsOn test
  reports {
    html.required = true
    xml.required = true
    csv.required = false
  }
}

def packageName = "indigo-core"
def packageDescription = "A dynamic actor framework for the JVM"

dependencies {
  api project(":indigo-commons")
  api "com.obsidiandynamics.fulcrum:fulcrum-assert:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-func:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-version:${fulcrumVersion}"
  
  testImplementation project(":indigo-assurance")
  testImplementation "com.obsidiandynamics.fulcrum:fulcrum-await:${fulcrumVersion}"
  testImplementation "com.obsidiandynamics.fulcrum:fulcrum-junit:${fulcrumVersion}"
  testImplementation "com.obsidiandynamics.fulcrum:fulcrum-threads:${fulcrumVersion}"
  testImplementation "com.obsidiandynamics.fulcrum:fulcrum-verifier:${fulcrumVersion}"
  testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
  testImplementation "nl.jqno.equalsverifier:equalsverifier:${equalsverifierVersion}"
  testImplementation "com.obsidiandynamics.pojotester:core:${pojotesterVersion}"
}

jar {
  finalizedBy jacocoTestReport
}

test {
  include "com/obsidiandynamics/indigo/CycledPrimaryTests.class"
  include "com/obsidiandynamics/indigo/SupportingTests.class"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = packageName
      from components.java
      pom {
        name = packageName
        description = packageDescription
        url = 'https://github.com/obsidiandynamics/indigo'
        licenses {
          license {
            name = 'BSD 3-Clause License'
            url = 'https://opensource.org/licenses/BSD-3-Clause'
          }
        }
        developers {
          developer {
            id = 'ekoutanov'
            name = 'Emil Koutanov'
            email = 'ekoutanov@gmail.com'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/obsidiandynamics/indigo.git'
          developerConnection = 'scm:git:ssh://github.com/obsidiandynamics/indigo.git'
          url = 'https://github.com/obsidiandynamics/indigo'
        }
      }
    }
  }
}
